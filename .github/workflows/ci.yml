name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Create test database
      run: |
        mkdir -p data
        python -c "
        from app.database import engine, Base, create_default_endpoints, SessionLocal
        Base.metadata.create_all(bind=engine)
        db = SessionLocal()
        create_default_endpoints(db)
        db.close()
        "

    - name: Run tests with coverage
      run: |
        # Run all tests (unit and E2E) with coverage reporting
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html --tb=short

    - name: Generate coverage badge and summary
      if: matrix.python-version == '3.12'
      run: |
        # Extract coverage percentage
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        line_rate = float(root.attrib['line-rate'])
        print(f'{line_rate * 100:.1f}')
        ")
        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
        echo "Coverage: $COVERAGE%"

        # Create coverage summary
        echo "## 📊 Coverage Report" > coverage-summary.md
        echo "" >> coverage-summary.md
        echo "**Total Coverage: $COVERAGE%**" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "### Coverage by Module:" >> coverage-summary.md
        echo "\`\`\`" >> coverage-summary.md
        python -m coverage report --format=text >> coverage-summary.md
        echo "\`\`\`" >> coverage-summary.md

    - name: Upload coverage reports
      if: matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          coverage-summary.md

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Comment coverage on PR
      if: matrix.python-version == '3.12' && github.event_name == 'pull_request'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const fs = require('fs');
            const coverageReport = fs.readFileSync('coverage-summary.md', 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });
            console.log('Coverage comment posted successfully');
          } catch (error) {
            console.log('Failed to post coverage comment (likely due to permissions):', error.message);
            // Continue without failing the workflow
          }

    - name: Check coverage threshold
      if: matrix.python-version == '3.12'
      run: |
        COVERAGE=${{ env.COVERAGE_PERCENTAGE }}
        THRESHOLD=40.0
        echo "Current coverage: $COVERAGE%"
        echo "Required threshold: $THRESHOLD%"

        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below required threshold of $THRESHOLD%"
          echo "Please add more tests to improve coverage."
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets the required threshold of $THRESHOLD%"
        fi

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-lint-

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run Black (code formatting check)
      run: black --check --diff app/ tests/

    - name: Run isort (import sorting check)
      run: isort --check-only --diff app/ tests/

    - name: Run flake8 (linting)
      run: flake8 app/ tests/

    - name: Run mypy (type checking)
      run: mypy app/ --config-file=mypy-ci.ini

    - name: Run bandit (security linting)
      run: bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run safety (dependency vulnerability check)
      run: safety check --json --output safety-report.json || true

    - name: Run pip-audit (dependency audit)
      run: pip-audit --format=json --output=pip-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  docker:
    name: Docker Container Tests
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment
      run: |
        # Create directories and test data
        mkdir -p data logs backups ssl

        # Create minimal test environment file
        cat > .env.test << EOF
        SECRET_KEY=test-secret-key-for-ci
        PORT=8004
        FRONTEND_PORT=8005
        DEBUG=false
        DATABASE_URL=sqlite:///./data/daemon.db
        CORS_ORIGINS=["http://localhost:8005","http://localhost"]
        EOF

    # Test 1: Build API container
    - name: Build API container
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        load: true
        tags: daemon-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Test 2: Build frontend development container
    - name: Build frontend development container
      uses: docker/build-push-action@v5
      with:
        context: .
        file: frontend/Dockerfile.dev
        platforms: linux/amd64
        load: true
        tags: daemon-frontend-dev:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Test 3: Build frontend production container
    - name: Build frontend production container
      uses: docker/build-push-action@v5
      with:
        context: .
        file: frontend/Dockerfile
        platforms: linux/amd64
        load: true
        tags: daemon-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Test 4: API container standalone test
    - name: Test API container individually
      run: |
        echo "🔍 Testing API container individually..."

        # Start API container
        docker run -d --name daemon-api-test \
          -p 8004:8004 \
          --env-file .env.test \
          -v $(pwd)/data:/app/data \
          daemon-api:test

        # Wait for startup
        echo "⏳ Waiting for API to start..."
        sleep 20

        # Test health endpoint
        echo "🏥 Testing health endpoint..."
        curl -f http://localhost:8004/health || (docker logs daemon-api-test && exit 1)
        echo "✅ Health check passed"

        # Test API docs
        echo "📚 Testing API documentation..."
        curl -f http://localhost:8004/docs || (docker logs daemon-api-test && exit 1)
        echo "✅ API docs accessible"

        # Test system info endpoint
        echo "ℹ️ Testing system info endpoint..."
        curl -f http://localhost:8004/api/v1/system/info || (docker logs daemon-api-test && exit 1)
        echo "✅ System info endpoint working"

        # Cleanup
        docker stop daemon-api-test && docker rm daemon-api-test
        echo "🎉 API container tests passed!"

    # Test 5: Frontend development container standalone test
    - name: Test frontend development container individually
      run: |
        echo "🔍 Testing frontend development container individually..."

        # Start frontend dev container
        docker run -d --name daemon-frontend-dev-test \
          -p 8005:8005 \
          -e FRONTEND_PORT=8005 \
          -e DAEMON_API_URL=http://host.docker.internal:8004 \
          daemon-frontend-dev:test

        # Wait for startup
        echo "⏳ Waiting for frontend to start..."
        sleep 10

        # Test frontend accessibility
        echo "🌐 Testing frontend accessibility..."
        curl -f http://localhost:8005/ || (docker logs daemon-frontend-dev-test && exit 1)
        echo "✅ Frontend development server accessible"

        # Cleanup
        docker stop daemon-frontend-dev-test && docker rm daemon-frontend-dev-test
        echo "🎉 Frontend development container tests passed!"

    # Test 6: Frontend production container standalone test
    - name: Test frontend production container individually
      run: |
        echo "🔍 Testing frontend production container individually..."

        # Start frontend production container
        docker run -d --name daemon-frontend-prod-test \
          -p 80:80 \
          -p 443:443 \
          daemon-frontend:test

        # Wait for nginx startup
        echo "⏳ Waiting for nginx to start..."
        sleep 10

        # Test HTTP endpoint
        echo "🌐 Testing HTTP frontend..."
        curl -f http://localhost/ || (docker logs daemon-frontend-prod-test && exit 1)
        echo "✅ Frontend production server accessible via HTTP"

        # Test HTTPS endpoint (self-signed cert)
        echo "🔒 Testing HTTPS frontend..."
        curl -k -f https://localhost/ || (docker logs daemon-frontend-prod-test && exit 1)
        echo "✅ Frontend production server accessible via HTTPS"

        # Test health endpoint
        echo "🏥 Testing frontend health endpoint..."
        curl -f http://localhost/health || (docker logs daemon-frontend-prod-test && exit 1)
        echo "✅ Frontend health check passed"

        # Cleanup
        docker stop daemon-frontend-prod-test && docker rm daemon-frontend-prod-test
        echo "🎉 Frontend production container tests passed!"

    # Test 7: Multi-container communication test (Development)
    - name: Test multi-container communication (Development)
      run: |
        echo "🔍 Testing multi-container communication (Development)..."

        # Create Docker network
        docker network create daemon-test-network

        # Start API container
        docker run -d --name daemon-api-comm-test \
          --network daemon-test-network \
          -p 8004:8004 \
          --env-file .env.test \
          -v $(pwd)/data:/app/data \
          daemon-api:test

        # Wait for API
        echo "⏳ Waiting for API to start..."
        sleep 20

        # Start frontend dev container
        docker run -d --name daemon-frontend-dev-comm-test \
          --network daemon-test-network \
          -p 8005:8005 \
          -e FRONTEND_PORT=8005 \
          -e DAEMON_API_URL=http://daemon-api-comm-test:8004 \
          daemon-frontend-dev:test

        # Wait for frontend
        echo "⏳ Waiting for frontend to start..."
        sleep 10

        # Test API accessibility from host
        echo "🔗 Testing API from host..."
        curl -f http://localhost:8004/health || exit 1
        echo "✅ API accessible from host"

        # Test frontend accessibility from host
        echo "🔗 Testing frontend from host..."
        curl -f http://localhost:8005/ || exit 1
        echo "✅ Frontend accessible from host"

        # Test inter-container communication
        echo "🔗 Testing inter-container communication..."
        docker exec daemon-frontend-dev-comm-test curl -f http://daemon-api-comm-test:8004/health || exit 1
        echo "✅ Frontend can communicate with API"

        # Cleanup
        docker stop daemon-api-comm-test daemon-frontend-dev-comm-test
        docker rm daemon-api-comm-test daemon-frontend-dev-comm-test
        docker network rm daemon-test-network
        echo "🎉 Multi-container development communication tests passed!"

    # Test 8: Multi-container communication test (Production)
    - name: Test multi-container communication (Production)
      run: |
        echo "� Testing multi-container communication (Production)..."

        # Create Docker network
        docker network create daemon-prod-network

        # Start API container (internal only)
        docker run -d --name daemon-api-prod-test \
          --network daemon-prod-network \
          --env-file .env.test \
          -v $(pwd)/data:/app/data \
          daemon-api:test

        # Wait for API
        echo "⏳ Waiting for API to start..."
        sleep 20

        # Start frontend production container
        docker run -d --name daemon-frontend-prod-comm-test \
          --network daemon-prod-network \
          -p 8080:80 \
          -p 8443:443 \
          -e DAEMON_API_URL=http://daemon-api-prod-test:8004 \
          daemon-frontend:test

        # Wait for frontend
        echo "⏳ Waiting for nginx to start..."
        sleep 10

        # Test frontend accessibility
        echo "🔗 Testing frontend from host..."
        curl -f http://localhost:8080/ || exit 1
        echo "✅ Frontend accessible from host"

        # Test HTTPS
        echo "🔒 Testing HTTPS frontend..."
        curl -k -f https://localhost:8443/ || exit 1
        echo "✅ Frontend HTTPS accessible"

        # Test API accessibility through frontend proxy (if configured)
        echo "🔗 Testing API through frontend proxy..."
        # Note: This would test API proxy if configured in nginx
        curl -f http://localhost:8080/health || exit 1
        echo "✅ Health endpoint accessible through frontend"

        # Test internal container communication
        echo "🔗 Testing internal communication..."
        docker exec daemon-frontend-prod-comm-test curl -f http://daemon-api-prod-test:8004/health || exit 1
        echo "✅ Frontend can communicate with API internally"

        # Cleanup
        docker stop daemon-api-prod-test daemon-frontend-prod-comm-test
        docker rm daemon-api-prod-test daemon-frontend-prod-comm-test
        docker network rm daemon-prod-network
        echo "🎉 Multi-container production communication tests passed!"

    # Test 9: Docker Compose integration test
    - name: Test Docker Compose profiles
      run: |
        echo "🔍 Testing Docker Compose profiles..."

        # Test API only
        echo "📋 Testing API-only deployment..."
        docker compose up -d daemon-api
        sleep 20
        curl -f http://localhost:8004/health || exit 1
        docker compose down
        echo "✅ API-only profile works"

        # Test development frontend
        echo "📋 Testing development frontend profile..."
        docker compose --profile frontend-dev up -d
        sleep 25
        curl -f http://localhost:8004/health || exit 1
        curl -f http://localhost:8005/ || exit 1
        docker compose --profile frontend-dev down
        echo "✅ Development frontend profile works"

        # Test production frontend
        echo "📋 Testing production frontend profile..."
        docker compose --profile frontend up -d
        sleep 30
        curl -f http://localhost:80/ || exit 1
        curl -k -f https://localhost:443/ || exit 1
        docker compose --profile frontend down
        echo "✅ Production frontend profile works"

        echo "🎉 Docker Compose profile tests passed!"

    # Test 10: Performance and resource tests
    - name: Test container performance and resources
      run: |
        echo "🔍 Testing container performance and resources..."

        # Start containers with resource limits
        docker run -d --name daemon-api-perf-test \
          --memory=256m --cpus=0.5 \
          -p 8004:8004 \
          --env-file .env.test \
          daemon-api:test

        # Wait and test under load
        sleep 20

        # Simple load test
        echo "⚡ Running basic load test..."
        for i in {1..10}; do
          curl -f http://localhost:8004/health > /dev/null &
        done
        wait
        echo "✅ API handles concurrent requests"

        # Check container stats
        echo "📊 Container resource usage:"
        docker stats daemon-api-perf-test --no-stream

        # Cleanup
        docker stop daemon-api-perf-test && docker rm daemon-api-perf-test
        echo "🎉 Performance tests passed!"

    # Build for production if all tests pass
    - name: Login to Docker Hub
      id: docker_login
      if: github.event_name != 'pull_request'
      continue-on-error: true
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      if: steps.docker_login.outcome == 'success'
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/daemon
          ${{ secrets.DOCKER_USERNAME }}/daemon-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API image
      if: steps.docker_login.outcome == 'success'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ secrets.DOCKER_USERNAME }}/daemon:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      if: steps.docker_login.outcome == 'success'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: frontend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ secrets.DOCKER_USERNAME }}/daemon-frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Docker image (no push)
      if: steps.docker_login.outcome != 'success'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64  # Single platform for speed
        load: true  # Load into Docker for testing
        tags: daemon:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      if: steps.docker_login.outcome != 'success'
      run: |
        echo "Testing Docker image functionality..."

        # Start container in background
        docker run -d --name daemon-test -p 8004:8004 daemon:test

        # Wait for container to be ready with proper health check loop
        echo "Waiting for container to be ready..."
        timeout=90
        counter=0
        while [ $counter -lt $timeout ]; do
          if curl -s http://localhost:8004/health > /dev/null 2>&1; then
            echo "✅ Container is ready after $counter seconds"
            break
          fi
          echo "Waiting for health endpoint... ($counter/$timeout)"
          sleep 2
          counter=$((counter + 2))
        done

        if [ $counter -ge $timeout ]; then
          echo "❌ Container failed to start within $timeout seconds"
          echo "Container logs:"
          docker logs daemon-test
          docker stop daemon-test
          docker rm daemon-test
          exit 1
        fi

        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8004/health || exit 1

        # Test API docs endpoint
        echo "Testing API docs..."
        curl -f http://localhost:8004/docs || exit 1

        # Check container logs
        echo "Container logs:"
        docker logs daemon-test

        # Stop and cleanup
        docker stop daemon-test
        docker rm daemon-test

        echo "✅ Docker image tests passed!"

  # Note: Deployment jobs are disabled until server infrastructure is configured
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [test, lint, security, docker]
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
  #   environment: staging
  #
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v5
  #
  #   - name: Deploy to staging server
  #     uses: appleboy/ssh-action@v1.0.0
  #     with:
  #       host: ${{ secrets.STAGING_HOST }}
  #       username: ${{ secrets.STAGING_USER }}
  #       key: ${{ secrets.STAGING_SSH_KEY }}
  #       script: |
  #         cd /opt/daemon-staging
  #         git pull origin develop
  #         docker-compose pull
  #         docker-compose up -d --no-deps app
  #         docker-compose exec -T app python -m app.cli health-check

  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [test, lint, security, docker]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: production
  #
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v5
  #
  #   - name: Deploy to production server
  #     uses: appleboy/ssh-action@v1.0.0
  #     with:
  #       host: ${{ secrets.PROD_HOST }}
  #       username: ${{ secrets.PROD_USER }}
  #       key: ${{ secrets.PROD_SSH_KEY }}
  #       script: |
  #         cd /opt/daemon-pmac
  #         git pull origin main
  #         docker-compose pull
  #         docker-compose up -d --no-deps app
  #         docker-compose exec -T app python -m app.cli health-check

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, lint, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Get version from pyproject.toml
      id: version
      run: |
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: tag_check
      run: |
        if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
        echo "exists=true" >> $GITHUB_OUTPUT
        else
        echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create and push tag
      if: steps.tag_check.outputs.exists == 'false'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.version.outputs.version }}
        git push origin ${{ steps.version.outputs.version }}

    - name: Create Release
      if: steps.tag_check.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## What's Changed

          * Automated release from main branch
          * All tests passing ✅
          * Security checks completed ✅
          * Successfully deployed to production ✅

          ## Docker Image

          ```bash
          docker pull ${{ secrets.DOCKER_USERNAME }}/daemon:${{ steps.version.outputs.version }}
          ```

          See [CHANGES.md](CHANGES.md) for detailed changelog.
        draft: false
        prerelease: false
